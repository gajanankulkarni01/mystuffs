#include <string>
#include <type_traits>

template<typename TChannel>
class CalculatorClient : public System::ServiceModel::ClientBase<TChannel>
{
	static_assert(std::is_class<TChannel>::value, L"TChannel must be a class");


public:
	CalculatorClient()
	{
	}

	CalculatorClient(const std::wstring &endpointConfigurationName) : System::ServiceModel::ClientBase<TChannel>(endpointConfigurationName)
	{
	}

	CalculatorClient(const std::wstring &endpointConfigurationName, const std::wstring &remoteAddress) : System::ServiceModel::ClientBase<TChannel>(endpointConfigurationName, remoteAddress)
	{
	}

	CalculatorClient(const std::wstring &endpointConfigurationName, EndpointAddress *remoteAddress) : System::ServiceModel::ClientBase<TChannel>(endpointConfigurationName, remoteAddress)
	{
	}

	CalculatorClient(Binding *binding, EndpointAddress *remoteAddress) : System::ServiceModel::ClientBase<TChannel>(binding, remoteAddress)
	{
	}

	double Add(double n1, double n2)
	{
		return System::ServiceModel::ClientBase<TChannel>::getChannel().Add(n1, n2);
	}

	double Subtract(double n1, double n2)
	{
		return System::ServiceModel::ClientBase<TChannel>::getChannel().Subtract(n1, n2);
	}

	double Multiply(double n1, double n2)
	{
		return System::ServiceModel::ClientBase<TChannel>::getChannel().Multiply(n1, n2);
	}

	double Divide(double n1, double n2)
	{
		return System::ServiceModel::ClientBase<TChannel>::getChannel().Divide(n1, n2);
	}
};
