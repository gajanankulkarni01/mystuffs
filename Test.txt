using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;

namespace TestNameSpace
{
    public class Test1 : Test2
    {
        [ConfigurationProperty("ABCD", IsDefaultCollection = false)]
        public Test3 ABCD
        {
            get
            {
                return base["ABCD"] as Test3;
            }
        }
    }

    [ConfigurationCollection(typeof(Test4), AddItemName = "DEF", CollectionType = ConfigurationElementCollectionType.BasicMap)]
    public class Test3 : ConfigurationElementCollection
    {
        protected override ConfigurationElement CreateNewElement()
        {
            return new Test4();
        }


        protected override Object GetElementKey(ConfigurationElement element)
        {
            return ((Test4)element).Name;
        }

        new public Test4 this[string Name]
        {
            get
            {
                return BaseGet(Name) as Test4;
            }
        }

        public int IndexOf(Test4 element)
        {
            return BaseIndexOf(element);
        }

        public void Add(Test4 element)
        {
            BaseAdd(element);
        }

        protected override void BaseAdd(ConfigurationElement element)
        {
            BaseAdd(element, false);
        }

        public void Remove(Test4 element)
        {
            if (BaseIndexOf(element) >= 0)
                BaseRemove(element.Name);
        }

        public void RemoveAt(int index)
        {
            BaseRemoveAt(index);
        }

        public void Remove(string name)
        {
            BaseRemove(name);
        }

        public void Clear()
        {
            BaseClear();
        }
    }

    [ConfigurationCollection(typeof(Test5), AddItemName = "add", CollectionType = ConfigurationElementCollectionType.BasicMap)]
    public class Test4 : ConfigurationElementCollection 
    {
        [ConfigurationProperty("name", DefaultValue = "Ga", IsRequired = true, IsKey = true)]
        [StringValidator(InvalidCharacters = " ~!@#$%^&*()[]{}/;'\"|\\", MinLength = 1, MaxLength = 60)]
        public string Name
        {
            get
            {
                return base["name"] as string;
            }
            set
            {
                base["name"] = value;
            }
        }

        public Test4()
        {
        }

        public Test4(string elementName)
        {
            Name = elementName;
        }


        protected override ConfigurationElement CreateNewElement()
        {
            return new Test5();
        }


        protected override Object GetElementKey(ConfigurationElement element)
        {
            return ((Test5)element).Key;
        }

        new public Test5 this[string Name]
        {
            get
            {
                return (Test5)BaseGet(Name);
            }
        }

        public int IndexOf(Test5 prop)
        {
            return BaseIndexOf(prop);
        }

        public void Add(Test5 prop)
        {
            BaseAdd(prop);
        }

        protected override void BaseAdd(ConfigurationElement element)
        {
            BaseAdd(element, false);
        }

        public void Remove(Test5 prop)
        {
            if (BaseIndexOf(prop) >= 0)
                BaseRemove(prop.Key);
        }

        public void RemoveAt(int index)
        {
            BaseRemoveAt(index);
        }

        public void Remove(string name)
        {
            BaseRemove(name);
        }

        public void Clear()
        {
            BaseClear();
        }

    }

    public class Test5 : ConfigurationElement
    {
        public Test5(String key, String value)
        {
            Key = key;
            Value = value;
        }

        public Test5()
        {
        }
		
        public Test5(string elementKey)
        {
            Key = elementKey;
        }

        [ConfigurationProperty("key", DefaultValue = "Key", IsRequired = true, IsKey = true)]
        public string Key
        {
            get
            {
                return (string)this["key"];
            }
            set
            {
                this["key"] = value;
            }
        }

        [ConfigurationProperty("value", DefaultValue = "Value", IsRequired = true)]
        public string Value
        {
            get
            {
                return (string)this["value"];
            }
            set
            {
                this["value"] = value;
            }
        }
    }
}
